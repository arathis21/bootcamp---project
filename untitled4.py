# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q7HPjPrx20FlvjNWcAlISd4Cm7kFTTtF

# **TITANIC SURVIVOR ANALYSIS**
"""

import pandas as pd
import numpy as np

"""# **READING DATA USING PANDAS**

We use pandas *read_csv* function to readthe csv file and python and *DataFrame* method to convertfile into data frame
"""

df = pd.DataFrame(pd.read_csv('/content/train (1).csv'))
df.head()

df.shape

"""# **HANDELING NULL VALUES**

The data set may contains many rows and columns for which some values are missing,we can't leave those missing values as it is.
In such cases we have two options:


*   Either drop the entire row or column
*   Fill the missing values with some appropriate values let's say mean of all the values of that column may do the job.
"""

df.isnull().sum()

"""Separating out the columns which having more than 35% of values missing in the data set"""

# df.isnull().sum() returns a pandas series with columns name as label index
# and total count of null values in the column as its null
# and we are storing only those columns which have more than 35% of data missing
x = df.isnull().sum()
drop_col = x[x>(35/100 * df.shape[1])]
drop_col

drop_col.index

df.drop(drop_col.index, axis=1, inplace=True)
df.isnull().sum()

df.fillna(df.mean(), inplace=True)
df.isnull().sum()

"""Because **Embarked** contains string values, we see the details of the column separately from others have string does not have mean and all"""

df['Embarked'].describe()

"""For **Embarked** attribute, we will fill **NULL** values with the most frequent value in the column"""

df['Embarked'].fillna('s',inplace=True)

df.isnull().sum()     # now all the NULL values are filled

"""SibSp:Number of Siblings/Spouses Abroad

Parch:Number of Parents/Children Abroad

So we can make a new column family_size by combining these two columns
"""

df['FamilySize'] = df['SibSp']+df['Parch']
df.drop(['SibSp', 'Parch'], axis=1, inplace=True)
df.corr()

"""**FamilSize in the ship doesn't have much correlance with survival rate**

Let's chek if we weather the person was alone or not can affect the survival rate
"""

df['Alone'] = [0 if df['FamilySize'][i]>0 else 1 for i in df.index]
df.head()

df.groupby(['Alone'])['Survived'].mean()

"""If the person is alone he/she  has les chance of surviving

> The reason must be the person who is travelling with his family belonging to rich rich class and might be prioritized over other


"""

df[['Alone','Fare']].corr()

"""So we can see the person was not alone the chance of ticket price is higher is high"""

df['Sex'] = [0 if df['Sex'][i]=='male' else 1 for i in df.index]     # 1 for female and 0 for male
df.groupby(['Sex'])['Survived'].mean()

"""It shows that female passengers have more chance of surviving than male passengers

It shows women were priortized over men
"""

df.groupby(['Embarked'])['Survived'].mean()

"""# **CONCLUSION**

*   Female passengers were prioritized over men
*   People with high class or rich people have higher survival rate than others.The heirarichy might have been followed while saving the passengers

*   Passsengers travelling with their family have higher survival rate
*   Passenger swho borded their ship at Cherbourg,survived more in propotion than others.
"""